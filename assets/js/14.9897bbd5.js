(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{367:function(t,a,s){"use strict";s.r(a);var e=s(44),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"指北"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指北"}},[t._v("#")]),t._v(" 指北")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("欢饮来到Mirai.Net的文档，希望你可以在这里找到你想要的一切。")]),t._v(" "),s("p",[t._v("Mirai.Net社区群: "),s("code",[t._v("1042821169")]),t._v("，欢迎你的加入。")]),t._v(" "),s("h2",{attrs:{id:"在开始之前"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在开始之前"}},[t._v("#")]),t._v(" 在开始之前")]),t._v(" "),s("p",[t._v("不过请不要着急，在文档之前，请先确保你已经知道以下几点：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Mirai.Net是一个开源项目。")]),t._v(" "),s("ul",[s("li",[t._v("也就是说开发者和维护人员本该没有任何义务回答你的问题，所以请学习"),s("a",{attrs:{href:"https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("提问的智慧"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("li",[t._v("以及几乎所有的Mirai.Net的开发工作都是用爱发电，所以请不要认为开发者和维护人员没有其它事情要做。")])])]),t._v(" "),s("li",[s("p",[t._v("我们希望有一个宽松的社区氛围。")]),t._v(" "),s("ul",[s("li",[t._v("请不要被上面这些看起来很严肃的话吓到，我们并不希望看到一个死气沉沉的社区环境，所以请大胆一些，只要你不是刚上小学（如果真是的话那也是个十分酷的事情，但是这里是个比喻）。")])])]),t._v(" "),s("li",[s("p",[t._v("请体面一些，也就是变得礼貌和友善。")])])]),t._v(" "),s("h2",{attrs:{id:"基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),s("p",[t._v("因为这份文档面向的是全体用户，所以为了照顾一些刚刚接触Mirai以及Mirai.Net的用户，在这里先补充一些基础知识吧。")]),t._v(" "),s("h3",{attrs:{id:"mirai生态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mirai生态"}},[t._v("#")]),t._v(" mirai生态")]),t._v(" "),s("p",[t._v("mirai是一个非常庞大的项目，这里仅仅是简单的扫盲，详细的了解请参考"),s("a",{attrs:{href:"https://github.com/mamoe/mirai/blob/dev/docs/mirai-ecology.md#mirai-%E4%BD%BF%E7%94%A8-kotlin-%E7%BC%96%E5%86%99%E7%9A%84%E9%AB%98%E6%95%88%E7%8E%87-qq-%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"mirai是啥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mirai是啥"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://github.com/mamoe/mirai",target:"_blank",rel:"noopener noreferrer"}},[t._v("mirai"),s("OutboundLink")],1),t._v("是啥")]),t._v(" "),s("blockquote",[s("p",[t._v("mirai 是一个在全平台下运行，提供 QQ Android 协议支持的高效率机器人库")])]),t._v(" "),s("p",[t._v("通常来说，使用mirai开发机器人有以下几种方式（以及比较冷门的mirai-native，我没使用过，故此处不进行介绍）：")]),t._v(" "),s("ol",[s("li",[t._v("直接引用"),s("a",{attrs:{href:"https://github.com/mamoe/mirai/tree/dev/mirai-core",target:"_blank",rel:"noopener noreferrer"}},[t._v("mirai-core"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("li",[t._v("使用"),s("a",{attrs:{href:"https://github.com/mamoe/mirai-console",target:"_blank",rel:"noopener noreferrer"}},[t._v("mirai-console"),s("OutboundLink")],1),t._v("，开发console插件。")]),t._v(" "),s("li",[t._v("或者使用"),s("a",{attrs:{href:"https://github.com/mamoe/mirai-api-http",target:"_blank",rel:"noopener noreferrer"}},[t._v("mirai-api-http"),s("OutboundLink")],1),t._v("。")])]),t._v(" "),s("p",[t._v("通常来说，使用前两种方式（core和console）需要一定的JVM编程语言基础（比如Kotlin或者Java），而后一种方式(api-http)则不限定语言和技术，这也就是为什么现在你可以用C#来调用mirai编写QQ机器人。")]),t._v(" "),s("h4",{attrs:{id:"mirai-api-http是啥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mirai-api-http是啥"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://github.com/mamoe/mirai-api-http",target:"_blank",rel:"noopener noreferrer"}},[t._v("mirai-api-http"),s("OutboundLink")],1),t._v("是啥")]),t._v(" "),s("blockquote",[s("p",[t._v("Mirai-API-http插件 提供HTTP API供所有语言使用mirai")])]),t._v(" "),s("p",[t._v("正如你打开本项目所见到的，之所有能够有一堆"),s("em",[t._v("mirai社区sdk")]),t._v("，正是因为有了mirai-api-http。")]),t._v(" "),s("p",[t._v("mirai-api-http是一个mirai-console插件，也就是说要使用mirai-api-http必须配置mirai-console环境，这个稍后会讲到。")]),t._v(" "),s("p",[t._v("mirai-api-http提供了一系列的http api用于与mirai-console交互，所以本质上Mirai.Net所提供的就是封装与mirai-api-http交互的过程，然后在此基础上尽量添加一些实用的功能。")]),t._v(" "),s("p",[t._v("看不懂？没关系，反正你只需要知道有这么个玩意就行了。")]),t._v(" "),s("h3",{attrs:{id:"收发消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#收发消息"}},[t._v("#")]),t._v(" 收发消息")]),t._v(" "),s("p",[t._v("这里简单地介绍以下Mirai.Net发送和接收消息的一些基础概念。")]),t._v(" "),s("h4",{attrs:{id:"消息链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息链"}},[t._v("#")]),t._v(" 消息链")]),t._v(" "),s("p",[t._v("不管是发送和接收消息，mirai都使用了一种名叫"),s("em",[t._v("消息链")]),t._v("的方案来处理收到/发出的富文本消息。")]),t._v(" "),s("p",[t._v("也就是说，在一个消息链中，可以包含多种类型的消息，比如文本消息、图片消息、语音消息等等。")]),t._v(" "),s("h4",{attrs:{id:"消息接收器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息接收器"}},[t._v("#")]),t._v(" 消息接收器")]),t._v(" "),s("p",[t._v("消息接收器是Mirai.Net中特有的一种消息容器，通常来说，消息接收器都是"),s("code",[t._v("MessageReceiverBase")]),t._v("的子类，它们共同包含下列属性：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("MessageChain")]),t._v("，也就是消息链。")]),t._v(" "),s("li",[s("code",[t._v("Type")]),t._v("，用来指示该消息接收器的类型。\n"),s("ul",[s("li",[s("code",[t._v("Friend")]),t._v("，表示接收到的是好友消息。")]),t._v(" "),s("li",[s("code",[t._v("Group")]),t._v("，表示接收到的是群消息。")]),t._v(" "),s("li",[s("code",[t._v("Temp")]),t._v("，表示接收到的是临时消息。")]),t._v(" "),s("li",[s("code",[t._v("Stranger")]),t._v("，表示接收到的是陌生人消息。")]),t._v(" "),s("li",[s("code",[t._v("OtherClient")]),t._v("，表示接收到的是其他客户端消息。")])])])]),t._v(" "),s("p",[t._v("但实际上也还有一个基类没有定义，却同样存在于各个子类的属性"),s("code",[t._v("Sender")]),t._v("，这个属性表示消息的发送者，它会根据子类的不同而有着不同的类型。比如"),s("code",[t._v("GroupMessageReceiver")]),t._v("的"),s("code",[t._v("Sender")]),t._v("就是"),s("code",[t._v("Member")]),t._v("，而"),s("code",[t._v("FriendMessageReceiver")]),t._v("的"),s("code",[t._v("Sender")]),t._v("就是"),s("code",[t._v("Friend")]),t._v("，以此类推。")]),t._v(" "),s("h2",{attrs:{id:"安装和配置mirai环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装和配置mirai环境"}},[t._v("#")]),t._v(" 安装和配置mirai环境")]),t._v(" "),s("p",[t._v("虽然mirai的官方文档已经有了详细的配置教程，但是为了不让大家多看些文档，我们这里简单地介绍一下安装mirai的方法，如果你已经部署完成Mirai.Net所需要的mirai环境(以及最新的"),s("code",[t._v("mirai-api-http")]),t._v(")，这部分可以跳过。")]),t._v(" "),s("p",[t._v("注意，从这里开始，文档里所有的"),s("code",[t._v("mirai")]),t._v("指的都是mirao-console。")]),t._v(" "),s("h3",{attrs:{id:"安装-mcl"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-mcl"}},[t._v("#")]),t._v(" 安装 MCL")]),t._v(" "),s("p",[s("code",[t._v("MCL")]),t._v("(Mirai Console Loader Installer)是一个"),s("code",[t._v("mirai-console")]),t._v("的 CUI 封装，安装它就完事了。")]),t._v(" "),s("p",[t._v("首先访问"),s("code",[t._v("MCL")]),t._v("的"),s("a",{attrs:{href:"https://github.com/iTXTech/mcl-installer/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("github release"),s("OutboundLink")],1),t._v("，根据你的系统选择对应的安装器，通常来说你应该下载"),s("code",[t._v("mcl-installer-xx-windows-amd64.exe")]),t._v("，因为如果你用别的系统你应该不会继续看这个宝宝巴士文档。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/08/04/tpKVqcEsbQHkRGJ.png",alt:""}})]),t._v(" "),s("p",[t._v("那么，现在你已经下载好了"),s("code",[t._v("mcl-installer")]),t._v("，现在你需要把它放到一个文件夹里，然后运行它。通常来说，你应该只需要一直按"),s("code",[t._v("enter")]),t._v("键。")]),t._v(" "),s("p",[t._v("当"),s("code",[t._v("Press Enter to exit")]),t._v("出现，你就可以关闭安装器的窗口。")]),t._v(" "),s("h3",{attrs:{id:"启动-mcl"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动-mcl"}},[t._v("#")]),t._v(" 启动 MCL")]),t._v(" "),s("p",[t._v("下面就是安装好"),s("code",[t._v("MCL")]),t._v("的结果，你应该运行"),s("code",[t._v("mcl.cmd")]),t._v("这个命令脚本。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/08/04/oeDvuIQGWMY4kOz.png",alt:""}})]),t._v(" "),s("p",[t._v("运行之后，等到"),s("code",[t._v("main: mirai-console started successfully.")]),t._v("这行绿色字出现的时候，请先输入"),s("code",[t._v("/stop")]),t._v("来关闭"),s("code",[t._v("mcl.cmd")]),t._v("的运行窗口。因为我们还需要手动安装"),s("code",[t._v("mirai-api-http")]),t._v("插件。")]),t._v(" "),s("h3",{attrs:{id:"安装和配置-mirai-api-http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装和配置-mirai-api-http"}},[t._v("#")]),t._v(" 安装和配置 mirai-api-http")]),t._v(" "),s("p",[t._v("首先访问"),s("a",{attrs:{href:"https://github.com/project-mirai/mirai-api-http/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("mirai-api-http release"),s("OutboundLink")],1),t._v(" 页面，下载"),s("code",[t._v("jar")]),t._v("构件，下载完成后，把它放到"),s("code",[t._v("/plugins")]),t._v("目录下，然后再启动"),s("code",[t._v("mcl.cmd")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/08/04/dC35wLPz7rkcuj4.png",alt:""}})]),t._v(" "),s("p",[t._v("同样的，等到"),s("code",[t._v("main: mirai-console started successfully.")]),t._v("这行绿色字出现的时候，先输入"),s("code",[t._v("/stop")]),t._v("来关闭"),s("code",[t._v("mcl.cmd")]),t._v("的运行窗口。再打开"),s("code",[t._v("/config/net.mamoe.mirai-api-http/setting.yml")]),t._v("文件。")]),t._v(" "),s("p",[t._v("用下面的内容覆盖原有的内容(来自"),s("a",{attrs:{href:"https://docs.mirai.mamoe.net/mirai-api-http/#setting-yml-%E6%A8%A1%E6%9D%BF",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1),t._v("):")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 配置文件中的值，全为默认值")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 启用的 adapter, 内置有 http, ws, reverse-ws, webhook")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("adapters")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" http\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ws\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 是否开启认证流程, 若为 true 则建立连接时需要验证 verifyKey")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 建议公网连接时开启")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("enableVerify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("verifyKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234567890")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 开启一些调式信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("debug")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 是否开启单 session 模式, 若为 true，则自动创建 session 绑定 console 中登录的 bot")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 开启后，接口中任何 sessionKey 不需要传递参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 若 console 中有多个 bot 登录，则行为未定义")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 确保 console 中只有一个 bot 登陆时启用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("singleMode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 历史消息的缓存大小")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 同时，也是 http adapter 的消息队列容量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cacheSize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## adapter 的单独配置，键名与 adapters 项配置相同")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("adapterSettings")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 详情看 http adapter 使用说明 配置")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("http")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 详情看 websocket adapter 使用说明 配置")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ws")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("reservedSyncId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("-1")]),t._v("\n")])])]),s("p",[t._v("通常来说，你还需要自己修改"),s("code",[t._v("verifyKey")]),t._v("的值。")]),t._v(" "),s("h3",{attrs:{id:"登录机器人账号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#登录机器人账号"}},[t._v("#")]),t._v(" 登录机器人账号")]),t._v(" "),s("p",[t._v("启动"),s("code",[t._v("mcl.cmd")]),t._v("，这次不用再关。")]),t._v(" "),s("p",[t._v("输入命令:"),s("code",[t._v("/login <qq> <密码>")]),t._v("，就可以登陆机器人账号了。通常来说，正常的机器人账号是可以直接登陆的，如果出现红色的错误提示，那么你可以根据"),s("code",[t._v("mcl.cmd")]),t._v("输出的提示文本找人帮忙或者自己解决。")]),t._v(" "),s("p",[t._v("到这里，Mirai.Net所需要的"),s("code",[t._v("mirai")]),t._v("环境已经配置好了。")]),t._v(" "),s("h2",{attrs:{id:"安装-mirai-net"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-mirai-net"}},[t._v("#")]),t._v(" 安装 Mirai.Net")]),t._v(" "),s("p",[t._v("你可以创建一个新项目或者再现有的项目里安装Mirai.Net，但是请参考"),s("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/standard/net-standard",target:"_blank",rel:"noopener noreferrer"}},[t._v(".Net Standard implementation support"),s("OutboundLink")],1),t._v(" 来选择项目框架，通常来说建议选择长期支持的"),s("code",[t._v(".Net 6")]),t._v("，"),s("strong",[t._v("不推荐使用.Net Framework")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/08/04/dyQYARgux2kDIBX.png",alt:""}})]),t._v(" "),s("p",[t._v("在要安装项目上右击"),s("code",[t._v("管理Nuget包")]),t._v("，然后再"),s("code",[t._v("Nuget包管理器")]),t._v("的页面上搜索Mirai.Net，有时候你应该勾选"),s("code",[t._v("包含预发布")]),t._v("选项，然后点击安装按钮，在弹出的窗口上点击"),s("code",[t._v("确定")]),t._v("，就安装完成Mirai.Net了。")]),t._v(" "),s("h2",{attrs:{id:"开始写代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开始写代码"}},[t._v("#")]),t._v(" 开始写代码")]),t._v(" "),s("p",[t._v("Mirai.Net本质上是对"),s("code",[t._v("mirai-api-http")]),t._v("交互的封装，并且加了一些方便于使用的脚手架。如果你对"),s("code",[t._v("mirai")]),t._v("一窍不通，那么上面的宝宝巴士级别地安装教学也应该让你成功地配置了"),s("code",[t._v("mirai-api-http")]),t._v("环境。如果你对 C#几乎一窍不通，你希望借此机会来尝试一下 C#这门优雅地编程语言，那么Mirai.Net是一个不错的选择。Mirai.Net使用了许多的 C#特色功能，阅读源码或许会有一点帮助，用Mirai.Net来构建一个机器人应用程序也是非常有趣的一件事。")]),t._v(" "),s("h3",{attrs:{id:"miraibot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#miraibot"}},[t._v("#")]),t._v(" MiraiBot")]),t._v(" "),s("p",[t._v("Mirai.Net用"),s("code",[t._v("MiraiBot")]),t._v("类来表述一个 Mirai 机器人对象，可以有多个"),s("code",[t._v("MiraiBot")]),t._v("类实例，"),s("strong",[t._v("但是一经启动之后，Mirai.Net只会调用最后一个启动的"),s("code",[t._v("MiraiBot")]),t._v("实例。")])]),t._v(" "),s("p",[t._v("Mirai.Net实现了"),s("code",[t._v("IDisposable")]),t._v("接口，所以你应该在用不到此对象的时候调用其"),s("code",[t._v("Dispose")]),t._v("方法来释放资源，或者直接在初始化的时候使用"),s("code",[t._v("using")]),t._v("关键字。")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" bot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("MiraiBot")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Address "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost:8080"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    QQ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" xxx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    VerifyKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("创建一个"),s("code",[t._v("MiraiBot")]),t._v("对象只需要三个属性:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("QQ")]),t._v("，就是"),s("code",[t._v("mirai console")]),t._v("登陆的机器人的账号")]),t._v(" "),s("li",[s("code",[t._v("VerifyKey")]),t._v("，就是"),s("code",[t._v("mirai-api-http")]),t._v("配置文件内的"),s("code",[t._v("verifyKey")])]),t._v(" "),s("li",[s("code",[t._v("Address")]),t._v("，就是"),s("code",[t._v("mirai-api-http")]),t._v("配置文件内的"),s("code",[t._v("adapterSettings")]),t._v("的"),s("code",[t._v("host:port")]),t._v("组合值。"),s("strong",[t._v("Mirai.Net 需要"),s("code",[t._v("http")]),t._v("和"),s("code",[t._v("ws")]),t._v("这两个 adapter 的 host 和 post 相同。")])])]),t._v(" "),s("p",[t._v("创建完"),s("code",[t._v("MiraiBot")]),t._v("对象，就可以调用"),s("code",[t._v("Launch")]),t._v("方法来启动了:")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" bot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Launch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("注意，调用"),s("code",[t._v("Launch")]),t._v("方法并不会阻塞线程，所以如果你不想要你的程序马上退出的话，你应该自己阻塞线程。")]),t._v(" "),s("p",[t._v("使用死循环:")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReadLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"exit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("使用信号:")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" signal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("ManualResetEvent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsignal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WaitOne")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"hello-world"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hello-world"}},[t._v("#")]),t._v(" Hello, World!")]),t._v(" "),s("p",[t._v("这里是Mirai.Net使用指北的最后一部分，我们来看看如何使用Mirai.Net来发送一条消息。当然，这里仅仅是简单的演示，如果你需要更加深入了解，或许你应该去看"),s("a",{attrs:{href:""}},[t._v("示例")]),t._v("。")]),t._v(" "),s("p",[t._v("通常来说，消息的发送在Mirai.Net里分为主动发送被被动发送。被动发送就是收到了别人的消息再做出响应，而主动发送就是自己发送的消息。下面的示例仅演示主动发送消息。")]),t._v(" "),s("h4",{attrs:{id:"发送一条群聊消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发送一条群聊消息"}},[t._v("#")]),t._v(" 发送一条群聊消息")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" MessageManager"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SendGroupMessageAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"目标群号"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, World!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"发送一条好友消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发送一条好友消息"}},[t._v("#")]),t._v(" 发送一条好友消息")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" MessageManager"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SendFriendMessageAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"目标QQ"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, World!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"发送一条临时会话消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发送一条临时会话消息"}},[t._v("#")]),t._v(" 发送一条临时会话消息")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" MessageManager"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SendTempMessageAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"目标QQ"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"目标群号"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, World!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);