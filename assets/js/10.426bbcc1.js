(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{366:function(t,e,a){"use strict";a.r(e);var s=a(44),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"mirai-net-开发指南"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mirai-net-开发指南"}},[t._v("#")]),t._v(" Mirai.Net 开发指南")]),t._v(" "),a("p",[t._v("Mirai.Net项目使用Jetbrains Rider而非Visual Studio来开发，基于.Net 5和C# 9编写，默认适配.Net core 3.1，.Net5以及.Net 5-windows三个框架，如果想要适配旧的.Net Framework，请自行克隆源代码进行迁移工作。")]),t._v(" "),a("h2",{attrs:{id:"基础概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础概念"}},[t._v("#")]),t._v(" 基础概念")]),t._v(" "),a("p",[t._v("一下的这些东西看不懂不重要，重要的是：这个库，可以轻松地编写QQ机器人。")]),t._v(" "),a("h3",{attrs:{id:"mirai是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mirai是什么"}},[t._v("#")]),t._v(" mirai是什么？")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/mamoe/mirai",target:"_blank",rel:"noopener noreferrer"}},[t._v("mirai"),a("OutboundLink")],1),t._v(": mirai 是一个在全平台下运行，提供 QQ Android 协议支持的高效率机器人库")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/mamoe/mirai-console",target:"_blank",rel:"noopener noreferrer"}},[t._v("mirai-console"),a("OutboundLink")],1),t._v(": 它在 Mirai 框架提供的基础功能的基础上进行了封装并进一步提供了更方便的开放接口。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/project-mirai/mirai-api-http",target:"_blank",rel:"noopener noreferrer"}},[t._v("mirai-api-http"),a("OutboundLink")],1),t._v(": mirai-api-http是一个mirai-console插件，目的是为了让其它非jvm编程语言实现与mirai的交互。")])]),t._v(" "),a("h3",{attrs:{id:"mirai-net是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mirai-net是什么"}},[t._v("#")]),t._v(" Mirai.Net是什么？")]),t._v(" "),a("p",[t._v("Mirai.Net是.Net实现的mirai社区SDK，所谓社区SDK，就是基于"),a("a",{attrs:{href:"https://github.com/project-mirai/mirai-api-http",target:"_blank",rel:"noopener noreferrer"}},[t._v("mirai-api-http"),a("OutboundLink")],1),t._v("与mirai实现交会的非jvm编程语言SDK。")]),t._v(" "),a("p",[t._v("Mirai.Net所做的工作本质上就是对mirai-api-http所提供的接口进行一些post/get请求，以及监听它的Websocket消息。这个项目存在的意义就是为了开发者使用mirai-api-http的时候直接使用Mirai.Net封装好的.Net成员，而无需再去写一堆重复的json来请求mirai-api-http的响应。")]),t._v(" "),a("h2",{attrs:{id:"开始使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始使用"}},[t._v("#")]),t._v(" 开始使用")]),t._v(" "),a("p",[t._v("此处假设看这个文档的人是一个对mirai一无所知但对于C#(或者别的任何.Net编程语言，但是本文档的所有代码都会使用C#来编写)有一定基础的人。")]),t._v(" "),a("p",[t._v("请跟随以下步骤。")]),t._v(" "),a("h3",{attrs:{id:"配置mirai-console"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置mirai-console"}},[t._v("#")]),t._v(" 配置mirai-console")]),t._v(" "),a("p",[t._v("这个部分的内容实际上已经在"),a("a",{attrs:{href:"https://github.com/mamoe/mirai/blob/dev/docs/UserManual.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("mirai的用户手册"),a("OutboundLink")],1),t._v("里讲得很清楚，本文档将基于MCL控制台应用程序来作为示例，此处不再赘述详细的安装步骤。")]),t._v(" "),a("p",[a("strong",[t._v("值得注意的是，mirai-api-http是必须安装的，否则无法使用Mirai.Net。")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("./mcl --update-package net.mamoe:mirai-api-http --type plugin --channel stable\n")])])]),a("p",[t._v("安装完成mirai-api-http插件之后，请记得重新启动一下MCL，你会看到在"),a("code",[t._v("\\config\\net.mamoe.mirai-api-http")]),t._v("目录下已经生成了一个叫做"),a("code",[t._v("setting.yml")]),t._v("的YAML文档，请先关闭MCL，再使用任意编辑器打开这个文档。如果不懂这个文档里的内容指的是什么，可以打开"),a("a",{attrs:{href:"https://project-mirai.github.io/mirai-api-http",target:"_blank",rel:"noopener noreferrer"}},[t._v("mirai-api-http文档"),a("OutboundLink")],1),t._v("，往下拉。")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("setting.yml")]),t._v("里，找到"),a("code",[t._v("enableWebsocket")]),t._v("，并将其设置为"),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"安装mirai-net到你的项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装mirai-net到你的项目"}},[t._v("#")]),t._v(" 安装Mirai.Net到你的项目")]),t._v(" "),a("ul",[a("li",[t._v("在Visual Studio中选中你想要安装Mirai.Net的项目")]),t._v(" "),a("li",[t._v("然后再右击菜单中选择```管理Nuget程序包``")]),t._v(" "),a("li",[t._v("在"),a("code",[t._v("Nuget包管理器")]),t._v("页面")]),t._v(" "),a("li",[t._v("从"),a("code",[t._v("已安装")]),t._v("项选择"),a("code",[t._v("浏览")]),t._v("项")]),t._v(" "),a("li",[t._v("搜索"),a("code",[t._v("Mirai.Net")]),t._v("，点击安装")])]),t._v(" "),a("p",[t._v("至此，Mirai.Net已经安装到了你的项目里，接下来要做的事情，就是开始使用它。")]),t._v(" "),a("h3",{attrs:{id:"编写第一个hello-world"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写第一个hello-world"}},[t._v("#")]),t._v(" 编写第一个Hello, World")]),t._v(" "),a("p",[t._v("以下代码主要作用是展示是如何Mirai.Net发送一条Hello, World到群聊里的，其技术细节会在之后的文档中讲到，看不懂也没关系，复制粘贴即可，如果出现了引用缺失问题，请直接使用Visual Studio的自动修复功能来自动引用缺失的命名空间。")]),t._v(" "),a("h4",{attrs:{id:"配置bot对象的session属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置bot对象的session属性"}},[t._v("#")]),t._v(" 配置Bot对象的Session属性")]),t._v(" "),a("p",[t._v("除了机器人的QQ号之外，其它3个属性的值都来自于config\\net.mamoe.mirai-api-http\\setting.yml文件。")]),t._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[t._v("Bot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Session "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("MiraiSession")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Host "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"host"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    Port "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"port"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"authKey"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Guid.NewGuid()")]),t._v("\n    QQ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"机器人的QQ号"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"连接插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接插件"}},[t._v("#")]),t._v(" 连接插件")]),t._v(" "),a("p",[t._v("在这之后，调用"),a("code",[t._v("Launch")]),t._v("方法来和mirai-api-http插件建立连接。")]),t._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" Bot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Launch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"发送消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发送消息"}},[t._v("#")]),t._v(" 发送消息")]),t._v(" "),a("p",[t._v("最后，构造一个"),a("code",[t._v("GroupMessenger")]),t._v("对象，再调用它的"),a("code",[t._v("Send")]),t._v("方法，传入"),a("a",{attrs:{href:"what-is-message-chain"}},[t._v("消息链")]),t._v("即可发送一条消息到指定群聊。")]),t._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" groupMessenger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("GroupMessenger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"QQ群号"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" groupMessenger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("PlainMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, World"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"bot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bot"}},[t._v("#")]),t._v(" Bot")]),t._v(" "),a("p",[t._v("这部分内容将会详解Mirai.Net的核心部分，如果想要了解各种"),a("RouterLink",{attrs:{to:"/docs/message//"}},[t._v("消息")]),t._v("和"),a("RouterLink",{attrs:{to:"/docs/event/"}},[t._v("事件")]),t._v("，请访问网页上方导航栏。")],1),t._v(" "),a("p",[t._v("目前版本(1.0.0)的所有事件都被封装到Bot类里，所以这个类是在Mirai.Net里至关重要的一个类。Bot类是一个静态类，也就是说Bot类将有且仅有一个可访问对象。这意味着，如果要访问Bot类的对象，只需要使用"),a("code",[t._v("类名.成员")]),t._v("的方式即可。")]),t._v(" "),a("p",[t._v("此部分文档的粗体文字即为方法名，比如"),a("code",[t._v("static void Launch()")]),t._v("的意思就是一个叫做"),a("code",[t._v("Launch")]),t._v("的静态异步方法返回void，不需要任何参数。")]),t._v(" "),a("p",[t._v("如果没有特殊声明，Mirai.Net中的所有公开方法都是可等待的异步方法，请按照下方的格式调用。")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"公开属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公开属性"}},[t._v("#")]),t._v(" 公开属性")]),t._v(" "),a("p",[t._v("Bot类仅对外公开2个属性，分别是：")]),t._v(" "),a("ul",[a("li",[t._v("Session: 用来配置和mirai-api-http插件的交互\n"),a("ul",[a("li",[t._v("Host: 通常是127.0.0.1")]),t._v(" "),a("li",[t._v("Port: 用来与mirai-api-http连接的端口，范围是 1 - 65535")]),t._v(" "),a("li",[t._v("Key: 通常应该是一串随机字符")]),t._v(" "),a("li",[t._v("QQ: 机器人的QQ号")]),t._v(" "),a("li",[t._v("SessionKey: 这个属性只对外开放get访问器，不用管它")])])]),t._v(" "),a("li",[t._v("Modules: 用来实现模块化开发")])]),t._v(" "),a("h3",{attrs:{id:"static-void-launch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-void-launch"}},[t._v("#")]),t._v(" static void Launch()")]),t._v(" "),a("ul",[a("li",[t._v("与mirai-api-http建立连接")]),t._v(" "),a("li",[t._v("开始监听mirai-api-http通过websocket传来的消息和事件")]),t._v(" "),a("li",[t._v("把websocket传来的消息发送到每一个子模块")])]),t._v(" "),a("h3",{attrs:{id:"static-void-terminate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-void-terminate"}},[t._v("#")]),t._v(" static void Terminate()")]),t._v(" "),a("ul",[a("li",[t._v("断开与mirai-api-http的连接")]),t._v(" "),a("li",[t._v("结束websocket监听")])]),t._v(" "),a("h3",{attrs:{id:"static-string-getpluginversion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-string-getpluginversion"}},[t._v("#")]),t._v(" static string GetPluginVersion()")]),t._v(" "),a("p",[t._v("获取mirai-api-http插件的版本")]),t._v(" "),a("h3",{attrs:{id:"static-void-handlegroupjoinrequest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-void-handlegroupjoinrequest"}},[t._v("#")]),t._v(" static void HandleGroupJoinRequest()")]),t._v(" "),a("p",[t._v("处理入群申请")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("参数类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("是否可选")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://project-mirai.github.io/mirai-api-http/EventType.html#%E7%94%A8%E6%88%B7%E5%85%A5%E7%BE%A4%E7%94%B3%E8%AF%B7-bot%E9%9C%80%E8%A6%81%E6%9C%89%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("MemberJoinApplyEventArgs"),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("事件参数")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://project-mirai.github.io/mirai-api-http/EventType.html#%E7%94%A8%E6%88%B7%E5%85%A5%E7%BE%A4%E7%94%B3%E8%AF%B7-bot%E9%9C%80%E8%A6%81%E6%9C%89%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("MemberJoinApplyOperateType"),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("操作类型")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("如果拒绝，回复此消息")])])])]),t._v(" "),a("h3",{attrs:{id:"static-void-handleinvitedrequest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-void-handleinvitedrequest"}},[t._v("#")]),t._v(" static void HandleInvitedRequest()")]),t._v(" "),a("p",[t._v("处理机器人受邀申请")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("参数类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("是否可选")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://project-mirai.github.io/mirai-api-http/EventType.html#bot%E8%A2%AB%E9%82%80%E8%AF%B7%E5%85%A5%E7%BE%A4%E7%94%B3%E8%AF%B7",target:"_blank",rel:"noopener noreferrer"}},[t._v("BotInvitedEventArgs"),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("事件参数")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("bool")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("是否同意")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("如果拒绝，回复此消息")])])])]),t._v(" "),a("h3",{attrs:{id:"static-ienumerable-botfriend-getfriendlist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-ienumerable-botfriend-getfriendlist"}},[t._v("#")]),t._v(" static IEnumerable<BotFriend> GetFriendList()")]),t._v(" "),a("p",[t._v("获取机器人QQ号的好友列表")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("成员名")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Id")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("QQ号")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Nick")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("昵称")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Remark")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("备注")])])])]),t._v(" "),a("h3",{attrs:{id:"static-ienumerable-botgroup-getgrouplist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-ienumerable-botgroup-getgrouplist"}},[t._v("#")]),t._v(" static IEnumerable<BotGroup> GetGroupList()")]),t._v(" "),a("p",[t._v("获取机器人QQ号的群列表")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("成员名")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Id")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("群号")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Name")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("群名称")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Permission")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("MemberPermissionType")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("群内权限")])])])]),t._v(" "),a("h3",{attrs:{id:"static-ienumerable-groupmember-getgroupmemberlist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-ienumerable-groupmember-getgroupmemberlist"}},[t._v("#")]),t._v(" static IEnumerable<GroupMember> GetGroupMemberList()")]),t._v(" "),a("p",[t._v("获取某个群的成员列表")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("参数类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("是否可选")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("要获取的群号")])])])]),t._v(" "),a("h2",{attrs:{id:"imodule"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#imodule"}},[t._v("#")]),t._v(" IModule")]),t._v(" "),a("p",[t._v("IModule接口十分简单，只有一个传入"),a("code",[t._v("MessageReceivedArgs")]),t._v("作为参数的"),a("code",[t._v("void Execute()")]),t._v("方法。这并非是因为它不重要，只是因为目前的Mirai.Net1.0.0版本暂时还不是那么的完善，所以这个如此重要的类也只是做了一下简单的实现。")]),t._v(" "),a("h2",{attrs:{id:"commandmodulebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commandmodulebase"}},[t._v("#")]),t._v(" CommandModuleBase")]),t._v(" "),a("p",[a("code",[t._v("CommandModuleBase")]),t._v("是"),a("code",[t._v("ICommand")]),t._v("的实现，这是一个抽象类，定义了一个virtual的Execute方法，可选择性override。")]),t._v(" "),a("h3",{attrs:{id:"void-executecommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#void-executecommand"}},[t._v("#")]),t._v(" void ExecuteCommand()")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("参数类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("是否可选")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("MessageReceivedArgs")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("事件参数")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("string[]")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("命令参数")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);